#!/bin/bash

# Copyright 2008 Mauro Giachero <mauro.giachero@gmail.com>
# Copyright 2008-2022 Heinz Wiesinger, Amsterdam, The Netherlands
# All rights reserved.
#
# Redistribution and use of this script, with or without modification, is
# permitted provided that the following conditions are met:
#
# 1. Redistributions of this script must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
#  THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR IMPLIED
#  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
#  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO
#  EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
#  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
#  OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
#  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
#  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
#  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

cd $(dirname $0) ; CWD=$(pwd)

PKGNAM=virtualbox
VERSION=${VERSION:-$(echo VirtualBox-*.tar.?z | rev | cut -f 3- -d . | cut -f 1 -d - | rev)}
BUILD=${BUILD:-1}

# Automatically determine the architecture we're building on:
if [ -z "$ARCH" ]; then
  case "$(uname -m)" in
    i?86) ARCH=i586 ;;
    arm*) readelf /usr/bin/file -A | egrep -q "Tag_CPU.*[4,5]" && ARCH=arm || ARCH=armv7hl ;;
    # Unless $ARCH is already set, use uname -m for all other archs:
    *) ARCH=$(uname -m) ;;
  esac
  export ARCH
fi

# If the variable PRINT_PACKAGE_NAME is set, then this script will report what
# the name of the created package would be, and then exit. This information
# could be useful to other scripts.
if [ ! -z "${PRINT_PACKAGE_NAME}" ]; then
  echo "$PKGNAM-$VERSION-$ARCH-$BUILD.txz"
  exit 0
fi

NUMJOBS=${NUMJOBS:-" -j$(expr $(nproc) + 1) "}

if [ "$ARCH" = "i586" ]; then
  SLKCFLAGS="-O2 -march=i586 -mtune=i686"
  LIBDIRSUFFIX=""
  BUILDDIR="x86"
elif [ "$ARCH" = "i686" ]; then
  SLKCFLAGS="-O2 -march=i686 -mtune=i686"
  LIBDIRSUFFIX=""
  BUILDDIR="x86"
elif [ "$ARCH" = "s390" ]; then
  SLKCFLAGS="-O2"
  LIBDIRSUFFIX=""
  BUILDDIR=""
elif [ "$ARCH" = "x86_64" ]; then
  SLKCFLAGS="-O2 -fPIC"
  LIBDIRSUFFIX="64"
  BUILDDIR="amd64"
elif [ "$ARCH" = "armv7hl" ]; then
  SLKCFLAGS="-O3 -march=armv7-a -mfpu=vfpv3-d16"
  LIBDIRSUFFIX=""
  BUILDDIR=""
else
  SLKCFLAGS="-O2"
  LIBDIRSUFFIX=""
  BUILDDIR=""
fi

TMP=${TMP:-/tmp}
PKG=$TMP/package-$PKGNAM

rm -rf $PKG
mkdir -p $TMP $PKG

cd $TMP
rm -rf VirtualBox-$VERSION
tar xvf $CWD/VirtualBox-$VERSION.tar.?z || exit 1
cd VirtualBox-$VERSION || exit 1

chown -R root:root .
find . \
  \( -perm 777 -o -perm 775 -o -perm 711 -o -perm 555 -o -perm 511 \) \
  -exec chmod 755 {} \+ -o \
  \( -perm 666 -o -perm 664 -o -perm 600 -o -perm 444 -o -perm 440 -o -perm 400 \) \
  -exec chmod 644 {} \+

VBOXWEBUSER="240"
GROUP="215"
MODE="755"

# We don't want an init-script building kernel modules.
zcat $CWD/vboxdrv.sh-setup.diff.gz | patch -d src/VBox/Installer/linux --verbose || exit 1

# Fix wrong path to rdesktop-vrdp-keymaps
#zcat $CWD/006-rdesktop-vrdp-keymap-path.patch.gz | patch -p1 --verbose || exit 1

# Fix compiling with newer libxml2
#patch -p1 < $CWD/libxml-2.12.patch

# Fix compiling with GCC 13
#patch -p1 < $CWD/gcc-13.patch

# Skip python2 detection
sed -i 's|python2.7 python2.6 ||' ./configure

# Use our CFLAGS
sed -i "s|CXX_FLAGS=\"\"|CXX_FLAGS=\"$SLKCFLAGS -std=c++11\"|" ./configure

bash ./configure \
  --disable-kmods \
  --enable-vde \
  --enable-vnc \
  --with-makeself=/usr/bin/echo \
  --enable-webservice \
  --enable-hardening || exit 1

. ./env.sh

cp $CWD/LocalConfig.kmk .
sed -i "s|LIBDIR|lib$LIBDIRSUFFIX|" ./LocalConfig.kmk
sed -i "s|CXXFLAGS|$SLKCFLAGS -std=c++11|" ./LocalConfig.kmk

kmk ${NUMJOBS} LOCALCFG=./LocalConfig.kmk || exit 1

mkdir -p $PKG/usr/{lib$LIBDIRSUFFIX,share,include}/virtualbox \
  $PKG/usr/{bin,src} \
  $PKG/usr/share/{pixmaps,mime/packages} \
  $PKG/etc/{default,rc.d,vbox}

for i in vboxdrv.sh vboxballoonctrl-service.sh vboxautostart-service.sh; do
  SCRIPT=$(echo $i | cut -d "." -f 1)
  cp -f src/VBox/Installer/linux/$i $PKG/etc/rc.d/rc.$SCRIPT.new
  sed -i "s/%PACKAGE%/virtualbox/g" $PKG/etc/rc.d/rc.$SCRIPT.new
  sed -i "s/%NOLSB%/yes/" $PKG/etc/rc.d/rc.$SCRIPT.new
  sed -i "s/%DEBIAN%/no/" $PKG/etc/rc.d/rc.$SCRIPT.new
  sed -i "s/%GROUP%/vboxusers/" $PKG/etc/rc.d/rc.$SCRIPT.new
  sed -i "s/\[ -z \"\$DEBIAN\"/#\[ -z \"\$DEBIAN\"/" $PKG/etc/rc.d/rc.$SCRIPT.new
done

cp -f $CWD/vbox.cfg $PKG/etc/vbox/vbox.cfg.new
sed -i "s|LIBDIR|lib$LIBDIRSUFFIX|" $PKG/etc/vbox/vbox.cfg.new
cp -f $CWD/virtualbox.default $PKG/etc/default/virtualbox.new

cd out/linux.$BUILDDIR/release/bin/
  rm -f vboxdrv.ko
  mv src $PKG/usr/src/virtualbox-kernel-$VERSION

  if [ "${HEADLESS:-no}" = "no" ]; then
    mkdir -p $PKG/usr/share/applications
    mv virtualbox.desktop $PKG/usr/share/applications/
    sed -i "s|/opt/VirtualBox|/usr/share/virtualbox|" \
      $PKG/usr/share/applications/virtualbox.desktop
    mv nls* *.tar.bz2 $PKG/usr/share/virtualbox/
  fi
  mv VBox.png $PKG/usr/share/pixmaps/

  cd icons
    for i in *; do
      install -d $PKG/usr/share/icons/hicolor/$i/mimetypes
      mv $i/* $PKG/usr/share/icons/hicolor/$i/mimetypes
    done
  cd -
  rm -rf icons

  mv virtualbox.xml $PKG/usr/share/mime/packages

  export VBOX_INSTALL_PATH=/usr/lib$LIBDIRSUFFIX/virtualbox
  cd sdk/installer
    python3 ./vboxapisetup.py install --prefix "/usr" --root $PKG || exit 1
  cd -
  rm -rf sdk/installer

  mv sdk $PKG/usr/share/virtualbox/
  install -m $MODE -g $GROUP VBoxSysInfo.sh $PKG/usr/share/virtualbox/
  install -m $MODE -g $GROUP VBoxCreateUSBNode.sh $PKG/usr/share/virtualbox/
  install -m $MODE -g $GROUP VBoxTunctl $PKG/usr/bin/
  rm -f VBoxSysInfo.sh VBoxCreateUSBNode.sh VBoxTunctl
  mv * $PKG/usr/lib$LIBDIRSUFFIX/virtualbox/
  chown -R root:$GROUP $PKG/usr/lib$LIBDIRSUFFIX/virtualbox/
  chmod -R $MODE $PKG/usr/lib$LIBDIRSUFFIX/virtualbox/
  mv $PKG/usr/lib$LIBDIRSUFFIX/virtualbox/VBox.sh $PKG/usr/lib$LIBDIRSUFFIX/virtualbox/VBox
cd $TMP/VirtualBox-${VERSION}

# Drop broken symlink
rm -f $PKG/usr/lib$LIBDIRSUFFIX/virtualbox/components/VBoxREM.so

for i in VBoxManage VBoxHeadless VBoxVRDP VBoxBalloonCtrl VBoxBugReport \
  VBoxAutostart VirtualBox VirtualBoxVM VBoxSDL vboxwebsrv; do
  ln -s /usr/lib$LIBDIRSUFFIX/virtualbox/VBox $PKG/usr/bin/$i
done

for i in virtualbox vboxsdl; do
  ln -s /usr/lib$LIBDIRSUFFIX/virtualbox/VBox $PKG/usr/bin/$i
done

ln -s /usr/lib$LIBDIRSUFFIX/virtualbox/vbox-img $PKG/usr/bin/
ln -s /usr/lib$LIBDIRSUFFIX/virtualbox/vboximg-mount $PKG/usr/bin/

mkdir -p $PKG/var/{lib,log}/vboxweb
chown $VBOXWEBUSER:$GROUP $PKG/var/{lib,log}/vboxweb
cp -f src/VBox/Installer/linux/vboxweb-service.sh $PKG/etc/rc.d/rc.vboxweb-service.new
sed -i "s/%PACKAGE%/virtualbox/g" $PKG/etc/rc.d/rc.vboxweb-service.new
sed -i "s/%NOLSB%/yes/" $PKG/etc/rc.d/rc.vboxweb-service.new
sed -i "s/%DEBIAN%/no/" $PKG/etc/rc.d/rc.vboxweb-service.new
sed -i "s/\[ -z \"\$DEBIAN\"/#\[ -z \"\$DEBIAN\"/" $PKG/etc/rc.d/rc.vboxweb-service.new

for i in VBoxHeadless VirtualBoxVM VBoxSDL VBoxNetDHCP VBoxNetAdpCtl VBoxNetNAT; do
  chmod 4711 $PKG/usr/lib$LIBDIRSUFFIX/virtualbox/$i
done

# install headers. Needed by some third party tools
cp -rf include/* $PKG/usr/include/virtualbox/
rm -f $PKG/usr/include/virtualbox/Makefile.kmk
find $PKG/usr/include/virtualbox -name "Makefile.kup" -print0 | xargs -0 rm -f

cp -f $CWD/VBoxGuestAdditions_$VERSION.iso \
  $PKG/usr/share/virtualbox/VBoxGuestAdditions.iso

cp -f $CWD/UserManual.pdf \
  $PKG/usr/share/virtualbox/UserManual.pdf

cp -f $CWD/SDKRef.pdf \
  $PKG/usr/share/virtualbox/SDKRef.pdf

# install profile.d scripts for 3rd party apps
mkdir -p $PKG/etc/profile.d/
cat << EOF > $PKG/etc/profile.d/vbox.csh
#!/bin/csh
setenv VBOX_PROGRAM_PATH /usr/lib${LIBDIRSUFFIX}/virtualbox/
setenv VBOX_SDK_PATH /usr/share/virtualbox/sdk/
EOF
cat << EOF > $PKG/etc/profile.d/vbox.sh
#!/bin/sh
export VBOX_PROGRAM_PATH=/usr/lib${LIBDIRSUFFIX}/virtualbox/
export VBOX_SDK_PATH=/usr/share/virtualbox/sdk/
EOF
chmod 0755 $PKG/etc/profile.d/*

# setup udev rules for vboxdrv and USB device support
mkdir -p $PKG/lib/udev/rules.d
install -m 644 $CWD/10-virtualbox.rules $PKG/lib/udev/rules.d/

find $PKG -print0 | xargs -0 file | grep -e "executable" -e "shared object" | grep ELF \
  | cut -f 1 -d : | xargs strip --strip-unneeded 2> /dev/null || true

mkdir -p $PKG/usr/doc/$PKGNAM-$VERSION
cp -f COPYING COPYING.CDDL $PKG/usr/doc/$PKGNAM-$VERSION

mkdir -p $PKG/install
zcat $CWD/doinst.sh.gz > $PKG/install/doinst.sh
cat $CWD/slack-desc > $PKG/install/slack-desc

cd $PKG
/sbin/makepkg -l y -c n $TMP/${PKGNAM}-$VERSION-$ARCH-$BUILD.txz
